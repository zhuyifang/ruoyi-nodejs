// src/{{moduleName}}/{{moduleName}}.entity.ts
import {
    Entity,
    // 【核心重构】根据主键类型，我们可能需要 PrimaryColumn
    PrimaryColumn,
    PrimaryGeneratedColumn,
    Column,
    CreateDateColumn,
    UpdateDateColumn,
} from 'typeorm';

@Entity('{{tableName}}')
export class {{entityName}} {
    {{!-- 【核心重构】移除硬编码的 id 字段，动态生成主键和普通列 --}}
    {{#each columns}}
        {{#if this.isPrimary}}
            {{!-- 如果是自增主键，使用 @PrimaryGeneratedColumn --}}
            {{#if this.isAutoIncrement}}
    @PrimaryGeneratedColumn({ comment: '{{this.comment}}' })
            {{!-- 否则，使用 @PrimaryColumn，适用于 UUID 或手动分配的 ID --}}
            {{else}}
    @PrimaryColumn({
        type: '{{this.columnType}}',
        {{#if this.length}}length: {{this.length}},{{/if}}
        comment: '{{this.comment}}'
    })
            {{/if}}
    {{this.columnName}}: {{this.propertyType}};
        {{!-- 对于非主键、非审计字段，使用通用的 @Column --}}
        {{else if (not (isMember this.columnName "createdAt,updatedAt,createdBy,updatedBy"))}}

    @Column({{{buildColOpts this}}})
    {{this.columnName}}: {{this.propertyType}};
        {{/if}}
    {{/each}}

    {{#if hasTimestamps}}
    @CreateDateColumn({ comment: '创建时间' })
    createdAt: Date;

    @UpdateDateColumn({ comment: '更新时间' })
    updatedAt: Date;
    {{/if}}

    {{#if hasUserStamps}}
    @Column({ comment: '创建人ID', nullable: true })
    createdBy: number;

    @Column({ comment: '最后更新人ID', nullable: true })
    updatedBy: number;
    {{/if}}
}